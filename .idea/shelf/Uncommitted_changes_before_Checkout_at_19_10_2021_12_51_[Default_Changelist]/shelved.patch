Index: src/prototypeGame/controller/GameModele.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package prototypeGame.controller;\r\n\r\n\r\nimport javafx.animation.*;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ProgressBar;\r\nimport javafx.scene.input.KeyEvent;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.FontWeight;\r\nimport javafx.util.Duration;\r\nimport model.Audio;\r\nimport model.Difficulty;\r\nimport model.Score;\r\nimport prototypeGame.model.Game;\r\nimport prototypeGame.model.GameBoard;\r\nimport prototypeGame.widgets.Karaoke.Karaoke;\r\nimport widgets.SoundPlayer;\r\nimport widgets.tools.Utilities;\r\n\r\nimport java.beans.PropertyChangeEvent;\r\nimport java.beans.PropertyChangeListener;\r\n\r\npublic class GameModele  implements PropertyChangeListener {\r\n\r\n    /**\r\n     * The rate at which the game happen -> allow accelerating and decelerating of game.\r\n     * <br/> ex : setting at 2 will divide the time the tiles take by 2\r\n     * <br/>Is not a rate per ce, modify the duration of the keyFrames\r\n     * Default is 1\r\n     */\r\n    private double initialDurationRate = 1;\r\n\r\n    private Game game;\r\n\r\n    private GameBoard gameBoard;\r\n\r\n    /**The time it takes between each new tile */\r\n    private Duration addingTileDuration = Duration.seconds(2);\r\n\r\n    private Duration spaceDuration = addingTileDuration.add(Duration.seconds(1));\r\n\r\n    private final SpeedModifier speedModifier;\r\n\r\n    public CountDown countDown;\r\n\r\n    /**\r\n     * The timeLine responsible to add tile to the board every x time\r\n     */\r\n    private Timeline addingTile = new Timeline();\r\n\r\n    /**\r\n     * The timer used to check all collisions\r\n     */\r\n    private AnimationTimer updateAll;\r\n\r\n    private double score = 0;\r\n    /**The value of 1 tile in percentage*/\r\n    private double valueTile = 0;\r\n\r\n    /**The number of tiles that will appear in the game*/\r\n    private int nbTiles;\r\n\r\n    /**\r\n     * Store the data necessary to run a game and allow manipulation of score.\r\n     * <br/>Take all panes necessary from gameUI and distribute it\r\n     */\r\n    public GameModele(Game game){\r\n        this.game = game;\r\n        this.gameBoard = new GameBoard(this.game.getGameUI().gameUINodes.getBoard(), Utilities.parentToScreen(this.game.getGameUI().gameUINodes.getBar()));//this.game.getGameUI().gameUINodes.getBar().getBoundsInParent());\r\n        if(this.initialDurationRate != 1 && this.initialDurationRate != 0){\r\n            this.addingTileDuration = this.addingTileDuration.divide(this.initialDurationRate);\r\n            this.gameBoard.setOriginalTileModifier(this.initialDurationRate);\r\n        }\r\n        setListeners();\r\n        setTimers();\r\n        this.nbTiles = this.game.getGameUI().karaoke.getKaraokeController().getLengthForDifficulty();\r\n        this.valueTile = ((double) 100/ (double) this.nbTiles);\r\n        this.speedModifier = new SpeedModifier(this);\r\n        this.countDown = new CountDown(this, 3);\r\n    }\r\n\r\n    /**\r\n     * Set the current listeners\r\n     */\r\n    private void setListeners(){\r\n        this.gameBoard.getBar().addPropertyChangeListener(this);\r\n\r\n        //this.game.addEventFilter(KeyEvent.KEY_TYPED,);\r\n        //this.game.setOnKeyTyped(event -> {\r\n        this.game.addEventFilter(KeyEvent.KEY_TYPED, event -> {\r\n            System.out.println(\"Key typed\");\r\n            if(this.gameBoard.getBar().getCurrentTile() != null){\r\n                if(! game.getGameUI().karaoke.isFinished().getValue()){\r\n                    boolean good = false;\r\n                    try {\r\n                        good = game.getGameUI().karaoke.checkKey(event);\r\n                    } catch (Exception e) {\r\n                        System.out.println(\"Karaoke finished\");\r\n                        e.printStackTrace();\r\n                    }\r\n                    if(good){\r\n                        gameBoard.getBar().getCurrentTile().validated.set(true);\r\n                        //score += valueTile;\r\n                        ProgressBar gameScore = game.getGameUI().gameUINodes.getScoreBar();\r\n                        gameScore.setProgress(gameScore.getProgress() + (valueTile/100));\r\n                    } else {\r\n                        Audio.badTile.play();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setTimers(){\r\n        this.updateAll = new AnimationTimer() {\r\n            @Override\r\n            public void handle(long now) {\r\n                update();\r\n            }\r\n        };\r\n\r\n        this.addingTile.getKeyFrames().addAll(new KeyFrame(Duration.ZERO, event -> {\r\n            Karaoke karaoke = this.game.getGameUI().karaoke;\r\n            if(! karaoke.getKaraokeController().isPreviewFinished().getValue()){\r\n                char newTileChar = 0;\r\n                try {\r\n                    karaoke.getKaraokeController().nextPreviewChar();\r\n                    newTileChar = karaoke.getKaraokeController().getPreviewChar();\r\n                    this.speedModifier.updateSpeed();\r\n                    //System.out.println(\"new char : \"+newTileChar);\r\n                    this.gameBoard.createTile(newTileChar);\r\n                    if(newTileChar == ' '){ //Slow down next tile apparition if space\r\n                        //double comp = addingTileDuration.toMillis() / this.spaceDuration.toMillis();\r\n                        //this.addingTile.setRate(comp);\r\n                        double comp = addingTileDuration.divide(this.speedModifier.getCurrentRate()).toMillis() / this.spaceDuration.divide(this.speedModifier.getCurrentRate()).toMillis();\r\n                        this.addingTile.setRate(comp);\r\n                    } else {\r\n                        //this.addingTile.setRate(1);\r\n                        this.addingTile.setRate(this.speedModifier.getCurrentRate());\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"No new char in preview\");\r\n                    //e.printStackTrace();\r\n                }\r\n            }\r\n\r\n        }), new KeyFrame(addingTileDuration));\r\n        this.addingTile.setCycleCount(Animation.INDEFINITE);\r\n        this.addingTile.setAutoReverse(false);\r\n        this.addingTile.setRate(1);\r\n    }\r\n\r\n    /**\r\n     * Update all the game\r\n     */\r\n    private void update(){\r\n        if(this.gameBoard.isFirstCall()){\r\n            this.gameBoard.getBar().setBounds(Utilities.parentToScreen(this.game.getGameUI().gameUINodes.getBar()));\r\n        }\r\n        this.gameBoard.update();\r\n        if(this.game.getGameUI().karaoke.isFinished().getValue()){\r\n            closeGame();\r\n            ProgressBar gameScore = game.getGameUI().gameUINodes.getScoreBar();\r\n            double score = gameScore.getProgress()*100;\r\n            setGameScore(score);\r\n            this.game.getGameUI().showScorePanel(score);\r\n        }\r\n    }\r\n\r\n    public void start(){\r\n        SoundPlayer song = this.game.getSong().getLoopingSoundPlayer();\r\n        if(song != null)\r\n            song.play();\r\n        this.speedModifier.start();\r\n        this.addingTile.playFromStart();\r\n        this.updateAll.start();\r\n    }\r\n\r\n    /**\r\n     * Reset all sounds and send Score to Score manager\r\n     */\r\n    public void closeGame(){\r\n        this.speedModifier.sleepTimeLine.stop();\r\n        this.addingTile.stop();\r\n        this.updateAll.stop();\r\n    }\r\n\r\n\r\n    private void setGameScore(double score){\r\n        this.game.score = new Score(this.game.getSong(), this.game.getPoem(), this.game.getDifficulty() , score);\r\n    }\r\n\r\n    /**\r\n     * Happen when the bar change the current tile\r\n     * @param evt\r\n     */\r\n    @Override\r\n    public void propertyChange(PropertyChangeEvent evt) {\r\n        this.game.getGameUI().karaoke.next();\r\n    }\r\n\r\n\r\n    /**\r\n     * Class that will manage the speed rate of animations in the game\r\n     */\r\n    private static class SpeedModifier {\r\n\r\n        private GameModele gameModele;\r\n\r\n        /**The speed will be maximal at maxAtPortion part of the poem for each difficulty (1 max)*/\r\n        private double maxAtPortionEasy = 1,maxAtPortionMedium = 8/10.0, maxAtPortionHard = 6/10.0;\r\n        /**the speed at this separator will be the maximal*/\r\n        private int maxAtSeparator = 0;\r\n\r\n        /**The current rate applied to the game*/\r\n        private double currentRate = 1;\r\n\r\n        private boolean canChangeSpeed = false;\r\n\r\n        private double rateIncrement = 0;\r\n\r\n        /**The maximal rate the game can go to after acceleration*/\r\n        private final double maxRate = 2.5;\r\n\r\n        private Timeline sleepTimeLine = new Timeline();\r\n\r\n        /**The time during which no change to the speed of the game will be made*/\r\n        private Duration calmDuration = Duration.seconds(10);\r\n\r\n        /**\r\n         * Class that will manage the speed rate of animations in the game\r\n         */\r\n        private SpeedModifier(GameModele gameModele){\r\n\r\n            this.gameModele = gameModele;\r\n            calculateMaxSeparator();\r\n            this.sleepTimeLine.getKeyFrames().add(new KeyFrame(calmDuration, e -> setRateInflation()));\r\n        }\r\n\r\n        /**\r\n         * Set the increment the rate inflation will use\r\n         */\r\n        private void setRateInflation(){\r\n            int currentPreviewIdx = this.gameModele.game.getGameUI().karaoke.getKaraokeController().getPreviewSeparatorIdx();\r\n            int remainingTilesForMax = this.maxAtSeparator - currentPreviewIdx;\r\n            double workingRate = this.maxRate - this.gameModele.addingTile.getRate(); //1 being the original rate\r\n            if(this.gameModele.addingTile.getRate() != 1){\r\n                System.out.println(\"AddingTiles timeline original rate != 1 !!\");\r\n            }\r\n            this.rateIncrement = workingRate / remainingTilesForMax;\r\n            canChangeSpeed = true;\r\n\r\n        }\r\n\r\n        /**Calculate the separator at which the game will reach its maximum speed\r\n         *  depending on the difficulty and length of the poem*/\r\n        private void calculateMaxSeparator(){\r\n            double maxPortion = 1;\r\n            if(this.gameModele.game.getDifficulty() == Difficulty.DifficultyLevel.Easy){\r\n                maxPortion = maxAtPortionEasy;\r\n            } else if(this.gameModele.game.getDifficulty() == Difficulty.DifficultyLevel.Medium){\r\n                maxPortion = maxAtPortionMedium;\r\n            } else {\r\n                maxPortion = maxAtPortionHard;\r\n            }\r\n            this.maxAtSeparator = (int) Math.round(this.gameModele.nbTiles * maxPortion);\r\n        }\r\n\r\n        /**The current rate of the game*/\r\n        public double getCurrentRate() {\r\n            return currentRate;\r\n        }\r\n\r\n        /**\r\n         * Start the calculations for the speed\r\n         */\r\n        public void start(){\r\n            this.sleepTimeLine.play();\r\n        }\r\n\r\n        /**\r\n         * Calculate the current rate based on the current separator\r\n         * and accelerate both the addingTile timeline and the TranslateTransition of the tiles\r\n         * <br/>Will increment the rate of the addingTiles and tile TranslateTransition animations if\r\n         * it is inferior the the maximal rate.\r\n         */\r\n        public void updateSpeed(){\r\n            if(canChangeSpeed){\r\n                this.currentRate += this.rateIncrement;\r\n                this.gameModele.addingTile.setRate(this.currentRate);\r\n                this.gameModele.gameBoard.setRate(this.currentRate);\r\n                System.out.println(\"New rate = \"+this.currentRate);\r\n                if(this.currentRate >= this.maxRate){\r\n                    this.canChangeSpeed = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public class CountDown {\r\n\r\n        private GameModele gameModele;\r\n\r\n        private int maxValue;\r\n\r\n        private int currentValue;\r\n\r\n        private Label countDownDisplay = new Label();\r\n\r\n        private FadeTransition countDownFade = new FadeTransition();\r\n\r\n\r\n        /**\r\n         * Create a countdown and display it on the game panel.\r\n         * At the end of the countdown, begin the game.\r\n         * Add and remove itself from the game panel\r\n         * @param gameModele\r\n         * @param maxSec the max number of seconds for the countdown\r\n         */\r\n        CountDown(GameModele gameModele, int maxSec){\r\n            this.gameModele = gameModele;\r\n            this.maxValue = maxSec;\r\n            this.currentValue = this.maxValue;\r\n            this.countDownDisplay.setText(String.valueOf(maxSec));\r\n            this.countDownDisplay.setFont(Font.font(\"Comic Sans MS\", FontWeight.EXTRA_BOLD, 200));\r\n\r\n            this.countDownFade.setNode(this.countDownDisplay);\r\n            this.countDownFade.setDuration(Duration.seconds(1));\r\n            this.countDownFade.setDelay(Duration.seconds(0.5));\r\n            this.countDownFade.setFromValue(1);\r\n            this.countDownFade.setToValue(0);\r\n            this.countDownFade.setOnFinished(e -> onFinished());\r\n        }\r\n\r\n        /**\r\n         * Begin the countdown and display it on the game panel\r\n         */\r\n        public void start(){\r\n            this.gameModele.game.getGameUI().gameUINodes.getGamePanel().getChildren()\r\n                    .add(this.countDownDisplay);\r\n            this.countDownFade.play();\r\n            Audio.countDown.play();\r\n        }\r\n\r\n        private void onFinished(){\r\n            this.currentValue--;\r\n            if(this.currentValue == 0){\r\n                this.gameModele.game.getGameUI().gameUINodes.getGamePanel().getChildren()\r\n                        .remove(this.countDownDisplay);\r\n                this.gameModele.start();\r\n            } else {\r\n                this.countDownDisplay.setText(String.valueOf(this.currentValue));\r\n                this.countDownFade.playFromStart();\r\n                Audio.countDown.play();\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/prototypeGame/controller/GameModele.java b/src/prototypeGame/controller/GameModele.java
--- a/src/prototypeGame/controller/GameModele.java	(revision 63b10b36493d5e359ac40e27aa9f58cf162a155f)
+++ b/src/prototypeGame/controller/GameModele.java	(date 1634640169280)
@@ -28,7 +28,7 @@
      * <br/>Is not a rate per ce, modify the duration of the keyFrames
      * Default is 1
      */
-    private double initialDurationRate = 1;
+    private double initialDurationRate = 3;
 
     private Game game;
 
@@ -127,7 +127,7 @@
                     karaoke.getKaraokeController().nextPreviewChar();
                     newTileChar = karaoke.getKaraokeController().getPreviewChar();
                     this.speedModifier.updateSpeed();
-                    //System.out.println("new char : "+newTileChar);
+                    System.out.println("new char : "+newTileChar);
                     this.gameBoard.createTile(newTileChar);
                     if(newTileChar == ' '){ //Slow down next tile apparition if space
                         //double comp = addingTileDuration.toMillis() / this.spaceDuration.toMillis();
Index: src/prototypeGame/MainPrototypeGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package prototypeGame;\r\n\r\nimport javafx.animation.*;\r\nimport javafx.application.Application;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Duration;\r\nimport model.*;\r\nimport prototypeGame.model.Game;\r\nimport prototypeGame.model.Tile;\r\nimport prototypeGame.widgets.Karaoke.Karaoke;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class MainPrototypeGame  extends Application {\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) throws Exception {\r\n        //Parent root = new AnchorPane();\r\n       // root.prefWidth(300);\r\n        //root.prefWidth(275);\r\n        primaryStage.setTitle(\"Test prototype\");\r\n\r\n\r\n        DataHolder.init();\r\n\r\n        Audio.load();\r\n        Audio.loadSongs();\r\n\r\n        Node test;\r\n\r\n        //test = testTiles();\r\n\r\n        test = testGame();\r\n\r\n\r\n\r\n        Scene scene = new Scene((Parent) test, 1000, 650);\r\n\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n\r\n        Game g = (Game) test;\r\n        g.setExitHandler( e -> System.exit(0));\r\n        g.start();\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    Node testGame(){\r\n        //Poem poem = new Poem(\"Test Poem\", \"C:\\\\Users\\\\mathilde\\\\Documents\\\\Cours\\\\M1HCI\\\\Adv programmation of ISO\\\\Project\\\\Poemly\\\\src\\\\assets\\\\tests\\\\testReader.txt\");\r\n        Poem poem = new Poem(\"The Fat Cat\", \"src/assets/poems/The_Fat_Cat.txt\");\r\n        //Song song = Song.createEmptySong();\r\n        Song song = Audio.maypole;\r\n\r\n        Game game = new Game(poem, song, Difficulty.DifficultyLevel.Easy);\r\n\r\n\r\n        return game;\r\n    }\r\n\r\n\r\n    Node testTiles(){\r\n\r\n        Tile t = new Tile(100,100,'c');\r\n\r\n        /*t.getTranslateTransition().setByY(200);\r\n        t.getTranslateTransition().setDuration(Duration.seconds(5));\r\n        t.getTranslateTransition().play();\r\n\r\n         */\r\n\r\n        /*Timer timer = new Timer(10, new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n\r\n                t.moveDown();\r\n            }\r\n        });\r\n        timer.start();\r\n\r\n         */\r\n\r\n        /*AnimationTimer timer = new AnimationTimer() {\r\n\r\n            long lastUpdate = 0;\r\n\r\n            @Override\r\n            public void handle(long arg0) {\r\n                if(arg0 - lastUpdate >= 95000000) {\r\n                    update();\r\n                    lastUpdate = arg0;\r\n                }\r\n            }\r\n\r\n            public void update() {\r\n                t.moveDown();\r\n            }\r\n\r\n        };\r\n        timer.start();\r\n\r\n         */\r\n\r\n\r\n\r\n        Timeline timeline = new Timeline(new KeyFrame(Duration.millis(300), event -> {\r\n\r\n            t.moveDown();\r\n            System.out.println(\"New timeline call\");\r\n\r\n        }));\r\n        timeline.setCycleCount(Animation.INDEFINITE);\r\n        //timeline.setAutoReverse(false);\r\n        timeline.setRate(1);\r\n        timeline.play();\r\n\r\n\r\n\r\n\r\n/*\r\n        TranslateTransition tt = new TranslateTransition(Duration.seconds(5), t);\r\n        tt.setByY(600);\r\n        tt.play();\r\n\r\n */\r\n\r\n        return t;\r\n    }\r\n\r\n\r\n    public static void main(String[] args){\r\n        launch(args);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/prototypeGame/MainPrototypeGame.java b/src/prototypeGame/MainPrototypeGame.java
--- a/src/prototypeGame/MainPrototypeGame.java	(revision 63b10b36493d5e359ac40e27aa9f58cf162a155f)
+++ b/src/prototypeGame/MainPrototypeGame.java	(date 1634640460744)
@@ -55,12 +55,12 @@
 
 
     Node testGame(){
-        //Poem poem = new Poem("Test Poem", "C:\\Users\\mathilde\\Documents\\Cours\\M1HCI\\Adv programmation of ISO\\Project\\Poemly\\src\\assets\\tests\\testReader.txt");
-        Poem poem = new Poem("The Fat Cat", "src/assets/poems/The_Fat_Cat.txt");
+        Poem poem = new Poem("Test Poem", "C:\\Users\\mathilde\\Documents\\Cours\\M1HCI\\Adv programmation of ISO\\Project\\Poemly\\src\\assets\\tests\\testReader.txt");
+        //Poem poem = new Poem("The Fat Cat", "src/assets/poems/The_Fat_Cat.txt");
         //Song song = Song.createEmptySong();
         Song song = Audio.maypole;
 
-        Game game = new Game(poem, song, Difficulty.DifficultyLevel.Easy);
+        Game game = new Game(poem, song, Difficulty.DifficultyLevel.Hard);
 
 
         return game;
